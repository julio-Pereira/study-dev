name: Terraform Infrastructure Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'fsms-infrastructure/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'fsms-infrastructure/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (dev, staging, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Action to perform (plan, apply, destroy)'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: 1.5.0
  AWS_REGION: ${{ secrets.AWS_REGION }}
  WORKING_DIR: fsms-infrastructure

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ github.event.inputs.environment || 'dev' }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE }}"
        working-directory: ${{ env.WORKING_DIR }}

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ${{ env.WORKING_DIR }}

      - name: Terraform Plan
        id: plan
        if: github.event.inputs.action != 'destroy'
        run: |
          terraform plan \
            -var-file="environments/${{ github.event.inputs.environment || 'dev' }}/terraform.tfvars" \
            -out=tfplan
        working-directory: ${{ env.WORKING_DIR }}

      - name: Terraform Plan Destroy
        id: plan-destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          terraform plan -destroy \
            -var-file="environments/${{ github.event.inputs.environment || 'dev' }}/terraform.tfvars" \
            -out=tfplan
        working-directory: ${{ env.WORKING_DIR }}

      - name: Terraform Apply
        id: apply
        if: github.event.inputs.action == 'apply' || (github.event_name == 'push' && github.ref == 'refs/heads/main' && github.event.inputs.environment == 'dev')
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ env.WORKING_DIR }}

      - name: Terraform Destroy
        id: destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ env.WORKING_DIR }}

      - name: Extract Terraform Outputs
        id: terraform-outputs
        if: (github.event.inputs.action == 'apply' || (github.event_name == 'push' && github.ref == 'refs/heads/main' && github.event.inputs.environment == 'dev'))
        run: |
          echo "::set-output name=vpc_id::$(terraform output -raw vpc_id)"
          echo "::set-output name=eks_cluster_name::$(terraform output -raw eks_cluster_name)"
          echo "::set-output name=eks_cluster_endpoint::$(terraform output -raw eks_cluster_endpoint)"
          echo "::set-output name=rds_endpoint::$(terraform output -raw rds_endpoint)"
        working-directory: ${{ env.WORKING_DIR }}

      - name: Save Terraform Outputs
        if: (github.event.inputs.action == 'apply' || (github.event_name == 'push' && github.ref == 'refs/heads/main' && github.event.inputs.environment == 'dev'))
        run: |
          mkdir -p terraform-outputs
          terraform output -json > terraform-outputs/${{ github.event.inputs.environment || 'dev' }}-outputs.json
        working-directory: ${{ env.WORKING_DIR }}

      - name: Upload Terraform Outputs
        if: (github.event.inputs.action == 'apply' || (github.event_name == 'push' && github.ref == 'refs/heads/main' && github.event.inputs.environment == 'dev'))
        uses: actions/upload-artifact@v3
        with:
          name: terraform-outputs-${{ github.event.inputs.environment || 'dev' }}
          path: ${{ env.WORKING_DIR }}/terraform-outputs/