version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: fsms-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-fsms_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fsms-network

  mongodb:
    image: mongo:6.0
    container_name: fsms-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-mongodb}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-mongodb}
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongodb-data:/data/db
    networks:
      - fsms-network

  redis:
    image: redis:7-alpine
    container_name: fsms-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    networks:
      - fsms-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: fsms-rabbitmq
    restart: unless-stopped
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-rabbit}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbit}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - fsms-network

  adminer:
    image: adminer:latest
    container_name: fsms-adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8081}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - fsms-network

  # Backend API services
  # Uncomment when implementing backend services
  # api:
  #   build:
  #     context: ./fs-services
  #     dockerfile: Dockerfile
  #   container_name: fsms-api
  #   restart: unless-stopped
  #   ports:
  #     - "${API_PORT:-8080}:8080"
  #   environment:
  #     SPRING_PROFILES_ACTIVE: ${SPRING_PROFILE:-prod}
  #     SPRING_DATASOURCE_URL: jdbc:postgresql://${DB_HOST:-postgres}:${DB_PORT:-5432}/${DB_NAME:-fsms_db}
  #     SPRING_DATASOURCE_USERNAME: ${DB_USER:-postgres}
  #     SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-postgres}
  #     SPRING_DATA_MONGODB_URI: mongodb://${MONGO_USER:-mongodb}:${MONGO_PASSWORD:-mongodb}@${MONGO_HOST:-mongodb}:${MONGO_PORT:-27017}/${MONGO_DB:-fsms}
  #     SPRING_REDIS_HOST: ${REDIS_HOST:-redis}
  #     SPRING_REDIS_PORT: ${REDIS_PORT:-6379}
  #     SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
  #     SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST:-rabbitmq}
  #     SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT:-5672}
  #     SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USER:-rabbit}
  #     SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-rabbit}
  #     JWT_SECRET: ${JWT_SECRET:-default_jwt_secret_key_for_development_only}
  #     JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}
  #   depends_on:
  #     - postgres
  #     - mongodb
  #     - redis
  #     - rabbitmq
  #   networks:
  #     - fsms-network

  # Frontend Web UI
  # Uncomment when implementing frontend
  # web-ui:
  #   build:
  #     context: ./fs-user-interface
  #     dockerfile: Dockerfile
  #   container_name: fsms-web-ui
  #   restart: unless-stopped
  #   ports:
  #     - "${UI_PORT:-3000}:3000"
  #   environment:
  #     REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8080/api}
  #     REACT_APP_ENV: ${REACT_APP_ENV:-production}
  #     REACT_APP_API_TIMEOUT: ${REACT_APP_API_TIMEOUT:-30000}
  #     REACT_APP_GOOGLE_ANALYTICS_ID: ${REACT_APP_GOOGLE_ANALYTICS_ID:-}
  #   depends_on:
  #     - api
  #   networks:
  #     - fsms-network

volumes:
  postgres-data:
  mongodb-data:
  redis-data:
  rabbitmq-data:

networks:
  fsms-network:
    driver: bridge